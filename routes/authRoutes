const express = require('express');
const multer = require("multer");
const bcrypt = require('bcryptjs');
const db = require('../database/db');
const router = express.Router();
const path = require("path");
const fs = require("fs");

// Konfigurasi Multer
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, "public/images"); // Folder tempat menyimpan file
    },
    filename: function (req, file, cb) {
      cb(null, file.originalname); // Rename file
    },
  });
  
  const fileFilter = (req, file, cb) => {
    const allowedTypes = ["image/jpeg", "image/jpg", "image/png"];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error("Only images are allowed"));
    }
  };
  
  const upload = multer({ storage, fileFilter });
  const crypto = require("crypto");
  

// Route Signup
router.post('/signup', (req, res) => {
    const { username, password } = req.body;

    if (!username || !password) {
        return res.status(400).send('Username and password are required');
    }

    bcrypt.hash(password, 10)
        .then(hash => {
            db.query('INSERT INTO users (username, password) VALUES (?, ?)', [username, hash], (err, result) => {
                if (err) {
                    console.error('Error registering user:', err);
                    return res.status(500).send('Error registering user');
                }
                console.log('User registered successfully:', username);
                res.redirect('/login');
            });
        })
        .catch(err => {
            console.error('Error hashing password:', err);
            return res.status(500).send('Error hashing password');
        });
});

// Route untuk menampilkan form signup
router.get('/signup', (req, res) => {
    res.render('signup', {
        layout: 'layouts/main-layout'
    });
});

// Route Login
router.post('/login', (req, res) => {
    const { username, password } = req.body;

    if (!username || !password) {
        return res.status(400).send('Username and password are required');
    }

    db.query('SELECT * FROM users WHERE username = ?', [username], (err, results) => {
        if (err) {
            console.error('Error fetching user:', err);
            return res.status(500).send('Error fetching user');
        }
        if (results.length === 0) {
            console.log('User not found:', username);
            return res.status(400).send('User not found');
        }

        bcrypt.compare(password, results[0].password)
            .then(isMatch => {
                if (!isMatch) {
                    console.log('Incorrect password for user:', username);
                    return res.status(401).send('Incorrect password');
                }

                // Simpan userId dalam sesi setelah login berhasil
                req.session.userId = results[0].id;
                console.log('User logged in successfully:', username);
                res.redirect('/'); // Arahkan ke halaman utama setelah login
            })
            .catch(err => {
                console.error('Error checking password:', err);
                return res.status(500).send('Error checking password');
            });
    });
});

// Route untuk menampilkan form login
router.get('/login', (req, res) => {
    res.render('login', {
        layout: 'layouts/main-layout'
    });
});

// Route Logout
router.post('/logout', (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            console.error('Error logging out:', err);
            return res.status(500).send('Error logging out');
        }
        console.log('User logged out successfully');
        res.redirect('/login'); // Arahkan ke halaman login setelah logout
    });
});

module.exports = router;
